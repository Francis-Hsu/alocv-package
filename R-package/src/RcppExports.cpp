// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// alo_lasso_rcpp
List alo_lasso_rcpp(NumericMatrix A, NumericMatrix B, NumericVector y, bool has_intercept);
RcppExport SEXP _alocv_alo_lasso_rcpp(SEXP ASEXP, SEXP BSEXP, SEXP ySEXP, SEXP has_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type has_intercept(has_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(alo_lasso_rcpp(A, B, y, has_intercept));
    return rcpp_result_gen;
END_RCPP
}
// alo_enet_rcpp
List alo_enet_rcpp(NumericMatrix A, NumericMatrix B, NumericVector y, NumericVector lambda, int family, double alpha, bool has_intercept, Nullable<NumericVector> a0, double tolerance, bool use_rfp);
RcppExport SEXP _alocv_alo_enet_rcpp(SEXP ASEXP, SEXP BSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP familySEXP, SEXP alphaSEXP, SEXP has_interceptSEXP, SEXP a0SEXP, SEXP toleranceSEXP, SEXP use_rfpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type has_intercept(has_interceptSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< bool >::type use_rfp(use_rfpSEXP);
    rcpp_result_gen = Rcpp::wrap(alo_enet_rcpp(A, B, y, lambda, family, alpha, has_intercept, a0, tolerance, use_rfp));
    return rcpp_result_gen;
END_RCPP
}
// alo_svm_rcpp
List alo_svm_rcpp(NumericMatrix K, NumericVector y, NumericVector alpha, double rho, double lambda, double tolerance, bool use_rfp);
RcppExport SEXP _alocv_alo_svm_rcpp(SEXP KSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP lambdaSEXP, SEXP toleranceSEXP, SEXP use_rfpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< bool >::type use_rfp(use_rfpSEXP);
    rcpp_result_gen = Rcpp::wrap(alo_svm_rcpp(K, y, alpha, rho, lambda, tolerance, use_rfp));
    return rcpp_result_gen;
END_RCPP
}
// alo_svm_kernel
NumericMatrix alo_svm_kernel(NumericMatrix X, int kernel_type, double gamma, int degree, double coef0, bool use_rfp);
RcppExport SEXP _alocv_alo_svm_kernel(SEXP XSEXP, SEXP kernel_typeSEXP, SEXP gammaSEXP, SEXP degreeSEXP, SEXP coef0SEXP, SEXP use_rfpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< double >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< bool >::type use_rfp(use_rfpSEXP);
    rcpp_result_gen = Rcpp::wrap(alo_svm_kernel(X, kernel_type, gamma, degree, coef0, use_rfp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_alocv_alo_lasso_rcpp", (DL_FUNC) &_alocv_alo_lasso_rcpp, 4},
    {"_alocv_alo_enet_rcpp", (DL_FUNC) &_alocv_alo_enet_rcpp, 10},
    {"_alocv_alo_svm_rcpp", (DL_FUNC) &_alocv_alo_svm_rcpp, 7},
    {"_alocv_alo_svm_kernel", (DL_FUNC) &_alocv_alo_svm_kernel, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_alocv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
